

#include "DSP28x_Project.h"
#include "math.h"
#include "stdio.h"
#include "stdint.h"
#include "Filter.h"
#define pi 3.14159265358979323846

#define MIN(a, b) (((a) < (b)) ? (a) : (b))
#define MAX(a, b) (((a) > (b)) ? (a) : (b))


////////////////// MPPT /////////////////////


unsigned short data_num = 3;

unsigned short Trans_Ready = 0;
unsigned short Loop = 0;

float voltage = 0;
float current = 0;
float power = 0;
float current_mpp = 0;
int LED_On = 0;
int Rxnum = 0;
unsigned int Con_on = 0;
unsigned int Ready = 0;
unsigned int TxFifoLevel;
unsigned int RxfifoLevel;
unsigned int LoopCount;
unsigned short i;


int count = 0;
unsigned short on = 1;

unsigned short Error = 0;

int PI_con = 0;
int SW_F_Constant = 1875;
//int SW_F_Constant = 1875; //////////////////////////////////////////////////////////////////////
//int SW_F_Constant = 375;

float32 a = 1.1;

unsigned int Time_count = 0;
unsigned int LED_count = 0;
float Time = 0;
float LED_Time = 0;
int MPPT_Set = 0;

int LED_constant = 1;



////////////// Sensor Tune ///////////////////////////

float V_Max = 87.1586304; // tuned;
float V_offset = 0.0199999996; // tuned;

float HV_Max = 88.3; // tuned;
float HV_offset = 0; // tuned;


float A_Max = 69.7368011; // tuned;
float A_offset = -38.0250015; // tuned;

float V_sf = 0;

float HV_sf = 0;

float A_sf = 0;

////////////////////////////////////////////////////////////////////////////////////////

float PV1_V_present = 0, PV1_V_past = 0;
float PV1_I_present = 0, PV1_I_past = 0;
float PV1_W_present = 0, PV1_W_past = 0;
float Vaver1[128] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
float Iaver1[128] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
float PV1_V_aver_measured = 0;
float PV1_I_aver_measured = 0;
float PV1_W_aver_measured = 0;

float high_voltage = 0;
float high_voltage_max = 200;


////////////////////////////////// set //////////////////////////////////////


float V_ref = 30;
float V_del = 0.1;
float MPPT_Time = 0.1;
int MPPT_on = 0;


////////////////////////////////////////////////////////////////////////////////////////

float PV1_V_error = 0, PV1_V_error_Integ = 0, PV1_V_control_result = 0, PV1_V_control_sat = 0, AntiV1 = 0, diffV1 = 0, PV1_V_Pre_error = 0;

float PV1_Duty = 0;

float MAX_V = 48, MIN_V = 20;

//float constant = 0.00005;
float constant = 0.00005;

SOF_par LPF2_100_par = {0,0,0,0,0,0};
float LPF2_100_var[8] = {0,0,0,0,0,0,0,0};
val2 VI = {0,0};
val2 VI_res = {0,0};

//float Kp = 0.1, Ki = 100, Ka = 10, Kd = 0;
//float Kp = 0.01, Ki = 10, Ka = 100, Kd = 0; //- 20khz
//float Kp = 0.01, Ki = 100, Ka = 100, Kd = 0; // - 100khz
float Kp = 0.001, Ki = 10, Ka = 1000, Kd = 0; //- 20khz

void PV_V_PI(void);
void MPPT(void);


interrupt void ADC_PI(void);



void main(void)

 {

        DINT;

        InitSysCtrl();

        InitPieCtrl();

        InitPieVectTable();

        IER = 0x0000;
        IFR = 0x0000;

        InitAdc();

        InitCpuTimers();

        InitScibGpio();


        ConfigCpuTimer(&CpuTimer0, 150, 1000000);        // CpuTimer0 - 150MHz
        CpuTimer0Regs.PRD.all = (15000000-1);           // CpuTimer0 PRD 포화방지

        EALLOW;
        SysCtrlRegs.HISPCP.bit.HSPCLK = 1;

        PieVectTable.ADCINT = &ADC_PI;

        EDIS;





        EALLOW;


        GpioCtrlRegs.GPAMUX1.all = 0;

        GpioCtrlRegs.GPAMUX1.bit.GPIO0 = 1;


        GpioCtrlRegs.GPADIR.all = 0;


        GpioCtrlRegs.GPADIR.bit.GPIO7 = 0;
        GpioCtrlRegs.GPADIR.bit.GPIO8 = 1;
        GpioCtrlRegs.GPADIR.bit.GPIO9 = 1;

        GpioCtrlRegs.GPADIR.bit.GPIO10 = 1;
        GpioCtrlRegs.GPADIR.bit.GPIO11 = 1;

        GpioCtrlRegs.GPADIR.bit.GPIO12 = 0;             // SW1 - On
        GpioCtrlRegs.GPADIR.bit.GPIO13 = 0;             // SW1 - Stop

        GpioDataRegs.GPADAT.bit.GPIO8 = 0;
        GpioDataRegs.GPADAT.bit.GPIO9 = 0;
        GpioDataRegs.GPADAT.bit.GPIO10 = 1;
        GpioDataRegs.GPADAT.bit.GPIO11 = 1;


        GpioCtrlRegs.GPADIR.bit.GPIO15 = 1;
        GpioCtrlRegs.GPADIR.bit.GPIO16 = 1;
        GpioCtrlRegs.GPADIR.bit.GPIO17 = 1;
        GpioCtrlRegs.GPADIR.bit.GPIO18 = 1;
        GpioCtrlRegs.GPADIR.bit.GPIO19 = 1;
        GpioCtrlRegs.GPADIR.bit.GPIO20 = 1;
        GpioCtrlRegs.GPADIR.bit.GPIO21 = 1;


        GpioDataRegs.GPADAT.bit.GPIO16 = 0;
        GpioDataRegs.GPADAT.bit.GPIO17 = 0;
        GpioDataRegs.GPADAT.bit.GPIO18 = 0;
        GpioDataRegs.GPADAT.bit.GPIO19 = 0;
        GpioDataRegs.GPADAT.bit.GPIO20 = 0;
        GpioDataRegs.GPADAT.bit.GPIO21 = 0;



        GpioCtrlRegs.GPAMUX2.bit.GPIO31 = 0;
        GpioCtrlRegs.GPBMUX1.bit.GPIO34 = 0;

        GpioCtrlRegs.GPADIR.bit.GPIO31 = 1;
        GpioCtrlRegs.GPBDIR.bit.GPIO34 = 1;

        GpioDataRegs.GPADAT.bit.GPIO31 = 0;
        GpioDataRegs.GPBDAT.bit.GPIO34 = 0;


        GpioIntRegs.GPIOXINT1SEL.bit.GPIOSEL = 12;
        GpioIntRegs.GPIOXINT2SEL.bit.GPIOSEL = 13;


         AdcRegs.ADCTRL3.bit.ADCCLKPS = 1;
         AdcRegs.ADCTRL3.bit.SMODE_SEL = 1;
         AdcRegs.ADCTRL1.bit.CONT_RUN = 0;
         AdcRegs.ADCTRL1.bit.CPS = 2;

         AdcRegs.ADCTRL1.bit.ACQ_PS = 4;
         AdcRegs.ADCTRL1.bit.SEQ_CASC = 1;
         AdcRegs.ADCMAXCONV.bit.MAX_CONV1 = 2;
         AdcRegs.ADCCHSELSEQ1.bit.CONV00 = 0;
         AdcRegs.ADCCHSELSEQ1.bit.CONV01 = 1;
         AdcRegs.ADCCHSELSEQ1.bit.CONV02 = 2;

         AdcRegs.ADCTRL2.bit.EPWM_SOCB_SEQ = 1;
         AdcRegs.ADCTRL2.bit.INT_ENA_SEQ1 = 1;


         EPwm1Regs.ETPS.bit.INTPRD = 1;
         EPwm1Regs.TBCTL.bit.CTRMODE = 2;
         EPwm1Regs.TBCTL.bit.HSPCLKDIV = 1;
         EPwm1Regs.TBCTL.bit.CLKDIV = 0;

         EPwm1Regs.TBPRD = SW_F_Constant;// 20kHz 설정
         EPwm1Regs.TBCTR = 0x0000;              // TB 카운터 초기화
         EPwm1Regs.AQCTLA.bit.CAU = AQ_CLEAR;
         EPwm1Regs.AQCTLA.bit.CAD = AQ_SET;
         EPwm1Regs.DBCTL.bit.POLSEL = 0;
         EPwm1Regs.CMPA.half.CMPA = 0;

         EPwm2Regs.ETSEL.bit.SOCBEN = 1;
         EPwm2Regs.ETSEL.bit.SOCBSEL = 2;
         EPwm2Regs.ETPS.bit.SOCBPRD = 1;
         EPwm2Regs.ETPS.bit.INTPRD = 1;
         EPwm2Regs.TBCTL.bit.CTRMODE = 2;
         EPwm2Regs.TBCTL.bit.HSPCLKDIV = 1;
         EPwm2Regs.TBCTL.bit.CLKDIV = 0;

         EPwm2Regs.TBPRD = 1875;// 20kHz 설정

         EPwm2Regs.TBCTR = 0x0000;              // TB 카운터 초기화
         EPwm2Regs.AQCTLA.bit.CAU = AQ_CLEAR;
         EPwm2Regs.AQCTLA.bit.CAD = AQ_SET;
         EPwm2Regs.DBCTL.bit.POLSEL = 0;
         EPwm2Regs.CMPA.half.CMPA = 0;


         EPwm1Regs.TBCTL.bit.PHSEN = 0;
         EPwm2Regs.TBCTL.bit.PHSEN = 1;

         EPwm1Regs.TBCTL.bit.SYNCOSEL = 2;
         EPwm2Regs.TBCTL.bit.SYNCOSEL = 2;


        EDIS;


        XIntruptRegs.XINT1CR.bit.POLARITY = 2;
        XIntruptRegs.XINT1CR.bit.ENABLE = 1;

        XIntruptRegs.XINT2CR.bit.POLARITY = 2;
        XIntruptRegs.XINT2CR.bit.ENABLE = 1;

        PieCtrlRegs.PIEIER1.bit.INTx4 = 1;
        PieCtrlRegs.PIEIER1.bit.INTx5 = 1;
        PieCtrlRegs.PIEIER1.bit.INTx6 = 1;     // ADCINT Interrupt On



        IER |= M_INT1;


        EINT;
        ERTM;
        EnableInterrupts();

        LPF2_100_par = LPF2_set(100.0, 0.7071, 0.00002);

        V_sf = V_Max / 65535.0;
        HV_sf = HV_Max / 65535.0;
        A_sf = A_Max / 65535.0;



        while(1)
            {


            }
    }


interrupt void ADC_PI(void)
{

    GpioDataRegs.GPADAT.bit.GPIO15 = 1;

    Time_count++;
    Time = constant * Time_count;
    if(Time >= MPPT_Time) {MPPT_Set = 1; Time = 0; Time_count = 0;}

    voltage = (AdcRegs.ADCRESULT0 - AdcRegs.ADCRESULT1) * V_sf + V_offset;
    current = AdcRegs.ADCRESULT4 * A_sf + A_offset;
    VI.a = voltage;
    VI.b = current;


    if(current <= 0) current = 0;

    VI_res = SOF2(VI, LPF2_100_var, LPF2_100_par);


    PV1_V_aver_measured -= Vaver1[count];
    Vaver1[count] = VI_res.a * 0.0078125;
    PV1_V_aver_measured += Vaver1[count];

    PV1_I_aver_measured -= Iaver1[count];
    Iaver1[count] = VI_res.b * 0.0078125;
    PV1_I_aver_measured += Iaver1[count];

    count++;
    count = count & 0x7f;

    if(Con_on == 0)
    {
        V_ref = voltage;
        EPwm1Regs.CMPA.half.CMPA = 0;
        V_ref = voltage;
        PV1_V_error = 0;
        PV1_V_error_Integ = 0;
        PV1_V_control_result = 0;
        PV1_V_control_sat = 0;
        PV1_Duty = 0;
        MPPT_on = 0;
        MPPT_Set = 0;
        LED_constant = 1;
    }


    if(Con_on == 1)
    {

        if( MPPT_Set == 1 && MPPT_on)  MPPT();

        PV_V_PI();


    }


    GpioDataRegs.GPADAT.bit.GPIO15 = 0;

    AdcRegs.ADCTRL2.bit.RST_SEQ1 = 1;
    AdcRegs.ADCST.bit.INT_SEQ1_CLR = 1;
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}


void PV_V_PI(void)
{

    PV1_V_error = voltage - V_ref;

    PV1_V_error_Integ = PV1_V_error_Integ + (Ki * PV1_V_error *constant);

    if(PV1_V_error_Integ <= 0) PV1_V_error_Integ = 0;
    if(PV1_V_error_Integ >= 0.9) PV1_V_error_Integ = 0.9;

    PV1_V_control_result = Kp * PV1_V_error + PV1_V_error_Integ;

    if(PV1_V_control_result >= 0.9) PV1_V_control_sat = 0.9;
    else if(PV1_V_control_result <= 0) PV1_V_control_sat = 0;
    else PV1_V_control_sat = PV1_V_control_result;

    PV1_Duty = (Uint16) (SW_F_Constant*PV1_V_control_sat);        //Duty


    EPwm1Regs.CMPA.half.CMPA = PV1_Duty;

}

void MPPT(void)
{

    PV1_W_aver_measured = PV1_V_aver_measured * PV1_I_aver_measured;





    if(PV1_W_past == PV1_W_aver_measured) V_ref = V_ref;

    if (PV1_W_past < PV1_W_aver_measured)
        {
            if(PV1_V_past < PV1_V_aver_measured) V_ref = V_ref + V_del;
            if(PV1_V_past > PV1_V_aver_measured) V_ref = V_ref - V_del;
        }

    if (PV1_W_past > PV1_W_aver_measured)
        {
            if(PV1_V_past < PV1_V_aver_measured) V_ref = V_ref - V_del;
            if(PV1_V_past > PV1_V_aver_measured) V_ref = V_ref + V_del;
        }


    if(V_ref >= MAX_V) V_ref = MAX_V;
    if(V_ref <= MIN_V) V_ref = MIN_V;


        PV1_V_past = PV1_V_aver_measured;
        PV1_W_past = PV1_W_aver_measured;

        MPPT_Set = 0;

}




